// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: justice/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgFundCountry struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgFundCountry) Reset()         { *m = MsgFundCountry{} }
func (m *MsgFundCountry) String() string { return proto.CompactTextString(m) }
func (*MsgFundCountry) ProtoMessage()    {}
func (*MsgFundCountry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{0}
}
func (m *MsgFundCountry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundCountry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundCountry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundCountry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundCountry.Merge(m, src)
}
func (m *MsgFundCountry) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundCountry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundCountry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundCountry proto.InternalMessageInfo

func (m *MsgFundCountry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgFundCountryResponse struct {
}

func (m *MsgFundCountryResponse) Reset()         { *m = MsgFundCountryResponse{} }
func (m *MsgFundCountryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundCountryResponse) ProtoMessage()    {}
func (*MsgFundCountryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{1}
}
func (m *MsgFundCountryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundCountryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundCountryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundCountryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundCountryResponse.Merge(m, src)
}
func (m *MsgFundCountryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundCountryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundCountryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundCountryResponse proto.InternalMessageInfo

type MsgFallCountry struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgFallCountry) Reset()         { *m = MsgFallCountry{} }
func (m *MsgFallCountry) String() string { return proto.CompactTextString(m) }
func (*MsgFallCountry) ProtoMessage()    {}
func (*MsgFallCountry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{2}
}
func (m *MsgFallCountry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFallCountry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFallCountry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFallCountry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFallCountry.Merge(m, src)
}
func (m *MsgFallCountry) XXX_Size() int {
	return m.Size()
}
func (m *MsgFallCountry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFallCountry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFallCountry proto.InternalMessageInfo

func (m *MsgFallCountry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgFallCountryResponse struct {
}

func (m *MsgFallCountryResponse) Reset()         { *m = MsgFallCountryResponse{} }
func (m *MsgFallCountryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFallCountryResponse) ProtoMessage()    {}
func (*MsgFallCountryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{3}
}
func (m *MsgFallCountryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFallCountryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFallCountryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFallCountryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFallCountryResponse.Merge(m, src)
}
func (m *MsgFallCountryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFallCountryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFallCountryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFallCountryResponse proto.InternalMessageInfo

type MsgPrepareStart struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgPrepareStart) Reset()         { *m = MsgPrepareStart{} }
func (m *MsgPrepareStart) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareStart) ProtoMessage()    {}
func (*MsgPrepareStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{4}
}
func (m *MsgPrepareStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareStart.Merge(m, src)
}
func (m *MsgPrepareStart) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareStart) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareStart.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareStart proto.InternalMessageInfo

func (m *MsgPrepareStart) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgPrepareStartResponse struct {
}

func (m *MsgPrepareStartResponse) Reset()         { *m = MsgPrepareStartResponse{} }
func (m *MsgPrepareStartResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareStartResponse) ProtoMessage()    {}
func (*MsgPrepareStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{5}
}
func (m *MsgPrepareStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareStartResponse.Merge(m, src)
}
func (m *MsgPrepareStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareStartResponse proto.InternalMessageInfo

type MsgPrepareResult struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgPrepareResult) Reset()         { *m = MsgPrepareResult{} }
func (m *MsgPrepareResult) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareResult) ProtoMessage()    {}
func (*MsgPrepareResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{6}
}
func (m *MsgPrepareResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareResult.Merge(m, src)
}
func (m *MsgPrepareResult) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareResult.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareResult proto.InternalMessageInfo

func (m *MsgPrepareResult) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgPrepareResultResponse struct {
}

func (m *MsgPrepareResultResponse) Reset()         { *m = MsgPrepareResultResponse{} }
func (m *MsgPrepareResultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPrepareResultResponse) ProtoMessage()    {}
func (*MsgPrepareResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{7}
}
func (m *MsgPrepareResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPrepareResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPrepareResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPrepareResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPrepareResultResponse.Merge(m, src)
}
func (m *MsgPrepareResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPrepareResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPrepareResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPrepareResultResponse proto.InternalMessageInfo

type MsgBelongContry struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CountryAddress string `protobuf:"bytes,2,opt,name=countryAddress,proto3" json:"countryAddress,omitempty"`
}

func (m *MsgBelongContry) Reset()         { *m = MsgBelongContry{} }
func (m *MsgBelongContry) String() string { return proto.CompactTextString(m) }
func (*MsgBelongContry) ProtoMessage()    {}
func (*MsgBelongContry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{8}
}
func (m *MsgBelongContry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBelongContry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBelongContry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBelongContry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBelongContry.Merge(m, src)
}
func (m *MsgBelongContry) XXX_Size() int {
	return m.Size()
}
func (m *MsgBelongContry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBelongContry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBelongContry proto.InternalMessageInfo

func (m *MsgBelongContry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBelongContry) GetCountryAddress() string {
	if m != nil {
		return m.CountryAddress
	}
	return ""
}

type MsgBelongContryResponse struct {
}

func (m *MsgBelongContryResponse) Reset()         { *m = MsgBelongContryResponse{} }
func (m *MsgBelongContryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBelongContryResponse) ProtoMessage()    {}
func (*MsgBelongContryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{9}
}
func (m *MsgBelongContryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBelongContryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBelongContryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBelongContryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBelongContryResponse.Merge(m, src)
}
func (m *MsgBelongContryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBelongContryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBelongContryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBelongContryResponse proto.InternalMessageInfo

type MsgLeaveCountry struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgLeaveCountry) Reset()         { *m = MsgLeaveCountry{} }
func (m *MsgLeaveCountry) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveCountry) ProtoMessage()    {}
func (*MsgLeaveCountry) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{10}
}
func (m *MsgLeaveCountry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveCountry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveCountry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveCountry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveCountry.Merge(m, src)
}
func (m *MsgLeaveCountry) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveCountry) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveCountry.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveCountry proto.InternalMessageInfo

func (m *MsgLeaveCountry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgLeaveCountryResponse struct {
}

func (m *MsgLeaveCountryResponse) Reset()         { *m = MsgLeaveCountryResponse{} }
func (m *MsgLeaveCountryResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveCountryResponse) ProtoMessage()    {}
func (*MsgLeaveCountryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{11}
}
func (m *MsgLeaveCountryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveCountryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveCountryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveCountryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveCountryResponse.Merge(m, src)
}
func (m *MsgLeaveCountryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveCountryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveCountryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveCountryResponse proto.InternalMessageInfo

type MsgInvasionResult struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgInvasionResult) Reset()         { *m = MsgInvasionResult{} }
func (m *MsgInvasionResult) String() string { return proto.CompactTextString(m) }
func (*MsgInvasionResult) ProtoMessage()    {}
func (*MsgInvasionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{12}
}
func (m *MsgInvasionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvasionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvasionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvasionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvasionResult.Merge(m, src)
}
func (m *MsgInvasionResult) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvasionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvasionResult.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvasionResult proto.InternalMessageInfo

func (m *MsgInvasionResult) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgInvasionResultResponse struct {
}

func (m *MsgInvasionResultResponse) Reset()         { *m = MsgInvasionResultResponse{} }
func (m *MsgInvasionResultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInvasionResultResponse) ProtoMessage()    {}
func (*MsgInvasionResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{13}
}
func (m *MsgInvasionResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvasionResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvasionResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvasionResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvasionResultResponse.Merge(m, src)
}
func (m *MsgInvasionResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvasionResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvasionResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvasionResultResponse proto.InternalMessageInfo

type MsgInvasionStart struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CountryAddress string `protobuf:"bytes,2,opt,name=countryAddress,proto3" json:"countryAddress,omitempty"`
}

func (m *MsgInvasionStart) Reset()         { *m = MsgInvasionStart{} }
func (m *MsgInvasionStart) String() string { return proto.CompactTextString(m) }
func (*MsgInvasionStart) ProtoMessage()    {}
func (*MsgInvasionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{14}
}
func (m *MsgInvasionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvasionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvasionStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvasionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvasionStart.Merge(m, src)
}
func (m *MsgInvasionStart) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvasionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvasionStart.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvasionStart proto.InternalMessageInfo

func (m *MsgInvasionStart) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgInvasionStart) GetCountryAddress() string {
	if m != nil {
		return m.CountryAddress
	}
	return ""
}

type MsgInvasionStartResponse struct {
}

func (m *MsgInvasionStartResponse) Reset()         { *m = MsgInvasionStartResponse{} }
func (m *MsgInvasionStartResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInvasionStartResponse) ProtoMessage()    {}
func (*MsgInvasionStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb7bcdb01547d336, []int{15}
}
func (m *MsgInvasionStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInvasionStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInvasionStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInvasionStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInvasionStartResponse.Merge(m, src)
}
func (m *MsgInvasionStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInvasionStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInvasionStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInvasionStartResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgFundCountry)(nil), "chainjustice.chainjustice.justice.MsgFundCountry")
	proto.RegisterType((*MsgFundCountryResponse)(nil), "chainjustice.chainjustice.justice.MsgFundCountryResponse")
	proto.RegisterType((*MsgFallCountry)(nil), "chainjustice.chainjustice.justice.MsgFallCountry")
	proto.RegisterType((*MsgFallCountryResponse)(nil), "chainjustice.chainjustice.justice.MsgFallCountryResponse")
	proto.RegisterType((*MsgPrepareStart)(nil), "chainjustice.chainjustice.justice.MsgPrepareStart")
	proto.RegisterType((*MsgPrepareStartResponse)(nil), "chainjustice.chainjustice.justice.MsgPrepareStartResponse")
	proto.RegisterType((*MsgPrepareResult)(nil), "chainjustice.chainjustice.justice.MsgPrepareResult")
	proto.RegisterType((*MsgPrepareResultResponse)(nil), "chainjustice.chainjustice.justice.MsgPrepareResultResponse")
	proto.RegisterType((*MsgBelongContry)(nil), "chainjustice.chainjustice.justice.MsgBelongContry")
	proto.RegisterType((*MsgBelongContryResponse)(nil), "chainjustice.chainjustice.justice.MsgBelongContryResponse")
	proto.RegisterType((*MsgLeaveCountry)(nil), "chainjustice.chainjustice.justice.MsgLeaveCountry")
	proto.RegisterType((*MsgLeaveCountryResponse)(nil), "chainjustice.chainjustice.justice.MsgLeaveCountryResponse")
	proto.RegisterType((*MsgInvasionResult)(nil), "chainjustice.chainjustice.justice.MsgInvasionResult")
	proto.RegisterType((*MsgInvasionResultResponse)(nil), "chainjustice.chainjustice.justice.MsgInvasionResultResponse")
	proto.RegisterType((*MsgInvasionStart)(nil), "chainjustice.chainjustice.justice.MsgInvasionStart")
	proto.RegisterType((*MsgInvasionStartResponse)(nil), "chainjustice.chainjustice.justice.MsgInvasionStartResponse")
}

func init() { proto.RegisterFile("justice/tx.proto", fileDescriptor_bb7bcdb01547d336) }

var fileDescriptor_bb7bcdb01547d336 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4f, 0xcb, 0xd3, 0x40,
	0x10, 0xc6, 0x1b, 0x05, 0xff, 0x8c, 0x5a, 0x6b, 0x0e, 0x9a, 0x46, 0x08, 0xda, 0x83, 0x88, 0xda,
	0x14, 0x5b, 0x11, 0xb4, 0x5e, 0x6c, 0x41, 0x10, 0x0c, 0x94, 0xd6, 0x93, 0xb7, 0x34, 0x5d, 0xd2,
	0x48, 0xcc, 0x86, 0xdd, 0x4d, 0x69, 0x11, 0x04, 0xc1, 0xb3, 0xf8, 0xb1, 0x3c, 0xf6, 0xe8, 0x51,
	0xda, 0x2f, 0xf2, 0xf2, 0x26, 0xcd, 0x76, 0x37, 0x2d, 0xcd, 0xa6, 0xa7, 0xb2, 0xc9, 0x3c, 0xbf,
	0x99, 0x3c, 0x9d, 0x87, 0x85, 0xc6, 0xd7, 0x84, 0xb2, 0xc0, 0x43, 0x1d, 0xb6, 0xb4, 0x63, 0x82,
	0x19, 0xd6, 0x1f, 0x7b, 0x73, 0x37, 0x88, 0x76, 0x8f, 0x6d, 0xe9, 0xb0, 0xfb, 0x6d, 0x3d, 0x83,
	0xba, 0x43, 0xfd, 0x0f, 0x49, 0x34, 0x1b, 0xe2, 0x24, 0x62, 0x64, 0xa5, 0x1b, 0x70, 0xdd, 0x23,
	0xc8, 0x65, 0x98, 0x18, 0xda, 0x23, 0xed, 0xe9, 0xcd, 0x71, 0x7e, 0x6c, 0x19, 0x70, 0x5f, 0xae,
	0x1d, 0x23, 0x1a, 0xe3, 0x88, 0x72, 0x8a, 0x1b, 0x86, 0xca, 0x94, 0x7d, 0x2d, 0xa7, 0x3c, 0x87,
	0xbb, 0x0e, 0xf5, 0x47, 0x04, 0xc5, 0x2e, 0x41, 0x13, 0xe6, 0x12, 0x76, 0x02, 0xd3, 0x84, 0x07,
	0x85, 0x62, 0xce, 0x79, 0x01, 0x8d, 0xfd, 0xab, 0x31, 0xa2, 0x49, 0x78, 0x0a, 0x64, 0x82, 0x51,
	0xac, 0xe6, 0xa4, 0x49, 0x3a, 0xd1, 0x00, 0x85, 0x38, 0xf2, 0x87, 0xf8, 0xf4, 0x87, 0xe9, 0x4f,
	0xa0, 0xee, 0x65, 0x5f, 0xf4, 0x7e, 0x36, 0x23, 0x88, 0x52, 0xe3, 0x4a, 0x5a, 0x50, 0x78, 0xba,
	0x9b, 0x5c, 0x84, 0x16, 0x1c, 0xf8, 0x84, 0xdc, 0x05, 0x2a, 0x37, 0x32, 0xe3, 0x88, 0xc5, 0x9c,
	0xd3, 0x86, 0x7b, 0x0e, 0xf5, 0x3f, 0x46, 0x0b, 0x97, 0x06, 0x38, 0x2a, 0xb5, 0xe0, 0x21, 0x34,
	0x0f, 0xca, 0x39, 0xeb, 0x73, 0xea, 0x66, 0xfe, 0xb2, 0xe4, 0x6f, 0x51, 0x36, 0x21, 0x73, 0x5d,
	0xa2, 0xe6, 0x1d, 0xbb, 0xbf, 0x6f, 0xc0, 0x55, 0x87, 0xfa, 0xfa, 0x77, 0xb8, 0x25, 0x2e, 0xe6,
	0x4b, 0xbb, 0x74, 0x9d, 0x6d, 0x79, 0x3f, 0xcd, 0x37, 0x95, 0x25, 0xf9, 0x10, 0x69, 0x73, 0x61,
	0x9f, 0x55, 0x9b, 0xef, 0x25, 0xca, 0xcd, 0x0f, 0x93, 0xa0, 0xff, 0x80, 0xdb, 0x52, 0x0c, 0xba,
	0x6a, 0x28, 0x51, 0x63, 0xbe, 0xad, 0xae, 0xe1, 0xfd, 0x7f, 0x6a, 0x70, 0x47, 0xce, 0x4f, 0xaf,
	0x12, 0x2d, 0x13, 0x99, 0xfd, 0x33, 0x44, 0xa2, 0x07, 0x52, 0xf0, 0x14, 0x3d, 0x10, 0x35, 0xaa,
	0x1e, 0x1c, 0xcb, 0xe2, 0x65, 0x7f, 0x29, 0x88, 0x8a, 0xfd, 0x45, 0x8d, 0x6a, 0xff, 0x63, 0x19,
	0xd6, 0x7f, 0x69, 0x50, 0x2f, 0x24, 0xf8, 0x95, 0x1a, 0x4e, 0x56, 0x99, 0xef, 0xce, 0x51, 0x49,
	0xab, 0x20, 0x87, 0xbf, 0x57, 0x8d, 0x97, 0x6d, 0x63, 0xff, 0x0c, 0x51, 0x3e, 0xc3, 0x60, 0xf4,
	0x77, 0x63, 0x69, 0xeb, 0x8d, 0xa5, 0xfd, 0xdf, 0x58, 0xda, 0x9f, 0xad, 0x55, 0x5b, 0x6f, 0xad,
	0xda, 0xbf, 0xad, 0x55, 0xfb, 0xf2, 0xda, 0x0f, 0xd8, 0x3c, 0x99, 0xda, 0x1e, 0xfe, 0xd6, 0x49,
	0x99, 0xed, 0xfc, 0x12, 0x94, 0x4f, 0xcb, 0x0e, 0xbf, 0x1c, 0x57, 0x31, 0xa2, 0xd3, 0x6b, 0xe9,
	0x05, 0xd9, 0xbb, 0x08, 0x00, 0x00, 0xff, 0xff, 0x51, 0xe9, 0x3d, 0x5b, 0x34, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	FundCountry(ctx context.Context, in *MsgFundCountry, opts ...grpc.CallOption) (*MsgFundCountryResponse, error)
	FallCountry(ctx context.Context, in *MsgFallCountry, opts ...grpc.CallOption) (*MsgFallCountryResponse, error)
	PrepareStart(ctx context.Context, in *MsgPrepareStart, opts ...grpc.CallOption) (*MsgPrepareStartResponse, error)
	PrepareResult(ctx context.Context, in *MsgPrepareResult, opts ...grpc.CallOption) (*MsgPrepareResultResponse, error)
	BelongContry(ctx context.Context, in *MsgBelongContry, opts ...grpc.CallOption) (*MsgBelongContryResponse, error)
	LeaveCountry(ctx context.Context, in *MsgLeaveCountry, opts ...grpc.CallOption) (*MsgLeaveCountryResponse, error)
	InvasionResult(ctx context.Context, in *MsgInvasionResult, opts ...grpc.CallOption) (*MsgInvasionResultResponse, error)
	InvasionStart(ctx context.Context, in *MsgInvasionStart, opts ...grpc.CallOption) (*MsgInvasionStartResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) FundCountry(ctx context.Context, in *MsgFundCountry, opts ...grpc.CallOption) (*MsgFundCountryResponse, error) {
	out := new(MsgFundCountryResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/FundCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FallCountry(ctx context.Context, in *MsgFallCountry, opts ...grpc.CallOption) (*MsgFallCountryResponse, error) {
	out := new(MsgFallCountryResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/FallCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PrepareStart(ctx context.Context, in *MsgPrepareStart, opts ...grpc.CallOption) (*MsgPrepareStartResponse, error) {
	out := new(MsgPrepareStartResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/PrepareStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PrepareResult(ctx context.Context, in *MsgPrepareResult, opts ...grpc.CallOption) (*MsgPrepareResultResponse, error) {
	out := new(MsgPrepareResultResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/PrepareResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BelongContry(ctx context.Context, in *MsgBelongContry, opts ...grpc.CallOption) (*MsgBelongContryResponse, error) {
	out := new(MsgBelongContryResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/BelongContry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveCountry(ctx context.Context, in *MsgLeaveCountry, opts ...grpc.CallOption) (*MsgLeaveCountryResponse, error) {
	out := new(MsgLeaveCountryResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/LeaveCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InvasionResult(ctx context.Context, in *MsgInvasionResult, opts ...grpc.CallOption) (*MsgInvasionResultResponse, error) {
	out := new(MsgInvasionResultResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/InvasionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InvasionStart(ctx context.Context, in *MsgInvasionStart, opts ...grpc.CallOption) (*MsgInvasionStartResponse, error) {
	out := new(MsgInvasionStartResponse)
	err := c.cc.Invoke(ctx, "/chainjustice.chainjustice.justice.Msg/InvasionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	FundCountry(context.Context, *MsgFundCountry) (*MsgFundCountryResponse, error)
	FallCountry(context.Context, *MsgFallCountry) (*MsgFallCountryResponse, error)
	PrepareStart(context.Context, *MsgPrepareStart) (*MsgPrepareStartResponse, error)
	PrepareResult(context.Context, *MsgPrepareResult) (*MsgPrepareResultResponse, error)
	BelongContry(context.Context, *MsgBelongContry) (*MsgBelongContryResponse, error)
	LeaveCountry(context.Context, *MsgLeaveCountry) (*MsgLeaveCountryResponse, error)
	InvasionResult(context.Context, *MsgInvasionResult) (*MsgInvasionResultResponse, error)
	InvasionStart(context.Context, *MsgInvasionStart) (*MsgInvasionStartResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) FundCountry(ctx context.Context, req *MsgFundCountry) (*MsgFundCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundCountry not implemented")
}
func (*UnimplementedMsgServer) FallCountry(ctx context.Context, req *MsgFallCountry) (*MsgFallCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallCountry not implemented")
}
func (*UnimplementedMsgServer) PrepareStart(ctx context.Context, req *MsgPrepareStart) (*MsgPrepareStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareStart not implemented")
}
func (*UnimplementedMsgServer) PrepareResult(ctx context.Context, req *MsgPrepareResult) (*MsgPrepareResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareResult not implemented")
}
func (*UnimplementedMsgServer) BelongContry(ctx context.Context, req *MsgBelongContry) (*MsgBelongContryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BelongContry not implemented")
}
func (*UnimplementedMsgServer) LeaveCountry(ctx context.Context, req *MsgLeaveCountry) (*MsgLeaveCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCountry not implemented")
}
func (*UnimplementedMsgServer) InvasionResult(ctx context.Context, req *MsgInvasionResult) (*MsgInvasionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvasionResult not implemented")
}
func (*UnimplementedMsgServer) InvasionStart(ctx context.Context, req *MsgInvasionStart) (*MsgInvasionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvasionStart not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_FundCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/FundCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundCountry(ctx, req.(*MsgFundCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FallCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFallCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FallCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/FallCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FallCountry(ctx, req.(*MsgFallCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PrepareStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPrepareStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PrepareStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/PrepareStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PrepareStart(ctx, req.(*MsgPrepareStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PrepareResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPrepareResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PrepareResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/PrepareResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PrepareResult(ctx, req.(*MsgPrepareResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BelongContry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBelongContry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BelongContry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/BelongContry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BelongContry(ctx, req.(*MsgBelongContry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveCountry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/LeaveCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveCountry(ctx, req.(*MsgLeaveCountry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InvasionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInvasionResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InvasionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/InvasionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InvasionResult(ctx, req.(*MsgInvasionResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InvasionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInvasionStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InvasionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainjustice.chainjustice.justice.Msg/InvasionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InvasionStart(ctx, req.(*MsgInvasionStart))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chainjustice.chainjustice.justice.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FundCountry",
			Handler:    _Msg_FundCountry_Handler,
		},
		{
			MethodName: "FallCountry",
			Handler:    _Msg_FallCountry_Handler,
		},
		{
			MethodName: "PrepareStart",
			Handler:    _Msg_PrepareStart_Handler,
		},
		{
			MethodName: "PrepareResult",
			Handler:    _Msg_PrepareResult_Handler,
		},
		{
			MethodName: "BelongContry",
			Handler:    _Msg_BelongContry_Handler,
		},
		{
			MethodName: "LeaveCountry",
			Handler:    _Msg_LeaveCountry_Handler,
		},
		{
			MethodName: "InvasionResult",
			Handler:    _Msg_InvasionResult_Handler,
		},
		{
			MethodName: "InvasionStart",
			Handler:    _Msg_InvasionStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "justice/tx.proto",
}

func (m *MsgFundCountry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundCountry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundCountry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundCountryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundCountryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundCountryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFallCountry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFallCountry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFallCountry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFallCountryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFallCountryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFallCountryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPrepareStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPrepareStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPrepareResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPrepareResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPrepareResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPrepareResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBelongContry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBelongContry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBelongContry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryAddress) > 0 {
		i -= len(m.CountryAddress)
		copy(dAtA[i:], m.CountryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CountryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBelongContryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBelongContryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBelongContryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveCountry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveCountry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveCountry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveCountryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveCountryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveCountryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInvasionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvasionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvasionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInvasionResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvasionResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvasionResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInvasionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvasionStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvasionStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CountryAddress) > 0 {
		i -= len(m.CountryAddress)
		copy(dAtA[i:], m.CountryAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CountryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInvasionStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInvasionStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInvasionStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgFundCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFundCountryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFallCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFallCountryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPrepareStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPrepareStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPrepareResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPrepareResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBelongContry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CountryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBelongContryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveCountryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInvasionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInvasionResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInvasionStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CountryAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInvasionStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgFundCountry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundCountry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundCountry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundCountryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundCountryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundCountryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFallCountry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFallCountry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFallCountry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFallCountryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFallCountryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFallCountryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepareStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepareStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepareResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPrepareResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPrepareResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPrepareResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBelongContry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBelongContry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBelongContry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBelongContryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBelongContryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBelongContryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveCountry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveCountry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveCountry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveCountryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveCountryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveCountryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvasionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvasionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvasionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvasionResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvasionResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvasionResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvasionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvasionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvasionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInvasionStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInvasionStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInvasionStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
